<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.returnp.admin.dao.mapper.MainMapper">
  	
   <select id="selectSalesReports" parameterType="HashMap" resultType="HashMap">
		SELECT
			<if test = "searchType != null and searchType  =='year'" >  date_format(paymentApprovalDateTime, '%Y') as searchDate , </if>
			<if test = "searchType != null and searchType  =='month'" >  date_format(paymentApprovalDateTime, '%Y-%m') as searchDate, </if>
			<if test = "searchType != null and searchType  =='daily'" >  date_format(paymentApprovalDateTime, '%Y-%m-%d') as searchDate, </if>
			
			sum(A.paymentApprovalAmount) as salesSum,
			sum(if(A.paymentApprovalAmount >= 0, A.paymentApprovalAmount , 0)) as salesApprovalSum,
			<![CDATA[ 
			sum(if(A.paymentApprovalAmount < 0, A.paymentApprovalAmount , 0)) as salesCancelSum,
			]]>
			count(A.paymentApprovalAmount) as payCase
		from 
			(
				select PT.*
				from payment_transaction as PT
				inner join payment_transaction_router as PTR on (PT.paymentTransactionNo = PTR.paymentTransactionNo) 
				where 1 = 1 
				<if test = "searchDateStart != null and searchDateEnd != null  "> and (PT.paymentApprovalDateTime between #{searchDateStart} and #{searchDateEnd})</if>
				<if test = "searchAffiliate != null">and PT.affiliateNo = #{searchAffiliate}</if>
				<if test = "searchPaymentTransactionType != null">and PT.paymentTransactionType = #{searchPaymentTransactionType}</if>
				<if test = "searchPaymentApprovalStatus != null">and PT.paymentApprovalStatus = #{searchPaymentApprovalStatus}</if>
				<if test = "searchPaymentRouterNo != null">and PTR.paymentRouterNo = #{searchPaymentRouterNo}</if>
				
				<if test = "searchAccLowLimit != null and searchAccMaxLimit != null">
					and (PT.paymentApprovalAmount 	<![CDATA[ >=]]> #{searchAccLowLimit} and paymentApprovalAmount <![CDATA[ <=]]> #{searchAccMaxLimit})
				</if>
				<if test = "searchAccLowLimit != null and searchAccMaxLimit == null">
					and (PT.paymentApprovalAmount 	<![CDATA[ >=]]> #{searchAccLowLimit})
				</if>
				<if test = "searchAccLowLimit == null and searchAccMaxLimit != null">
					and (PT.paymentApprovalAmount 	<![CDATA[ <=]]> #{searchAccMaxLimit})
				</if>
				
				<if test="searchKeyword != null ">
	      			AND ( PT.memberName LIKE CONCAT('%',#{searchKeyword,jdbcType=VARCHAR},'%' ) OR PT.memberEmail LIKE CONCAT('%',#{searchKeyword,jdbcType=VARCHAR},'%' ) ) 
			     </if>
			) as A
		group by searchDate;
	</select>
	
	 <select id="selectPeriodSalesReports" parameterType="HashMap" resultType="HashMap">
	select 
		date_format(A.paymentApprovalDateTime, '%Y-%m-%d') as searchDate,
   	 		count(A.paymentApprovalAmount) as payCase,
   	 		sum(if(A.paymentApprovalAmount >= 0, A.paymentApprovalAmount , 0)) as salesApprovalSum,
   	 		<![CDATA[ 
			sum(if(paymentApprovalAmount < 0, paymentApprovalAmount , 0)) as salesCancelSum,
			]]>
   	 		sum(A.paymentApprovalAmount) as salesSum
	from 
		(
		 select PT.*, PTR.paymentRouterNo from payment_transaction as PT
		 inner join payment_transaction_router as PTR on (PT.paymentTransactionNo = PTR.paymentTransactionNo)
		 
		 where 1= 1
			<if test = "searchDateStart != null and searchDateEnd != null  "> and (PT.paymentApprovalDateTime between #{searchDateStart} and #{searchDateEnd})</if>
			<if test = "searchAffiliate != null">and PT.affiliateNo = #{searchAffiliate}</if>
			<if test = "searchPaymentTransactionType != null">and PT.paymentTransactionType = #{searchPaymentTransactionType}</if>
			<if test = "searchPaymentApprovalStatus != null">and PT.paymentApprovalStatus = #{searchPaymentApprovalStatus}</if>
			<if test = "searchPaymentRouterNo != null">and PTR.paymentRouterNo = #{searchPaymentRouterNo}</if>
			
			<if test = "searchAccLowLimit != null and searchAccMaxLimit != null">
				and (PT.paymentApprovalAmount 	<![CDATA[ >=]]> #{searchAccLowLimit} and paymentApprovalAmount <![CDATA[ <=]]> #{searchAccMaxLimit})
			</if>
			<if test = "searchAccLowLimit != null and searchAccMaxLimit == null">
				and (PT.paymentApprovalAmount 	<![CDATA[ >=]]> #{searchAccLowLimit})
			</if>
			<if test = "searchAccLowLimit == null and searchAccMaxLimit != null">
				and (PT.paymentApprovalAmount 	<![CDATA[ <=]]> #{searchAccMaxLimit})
			</if>
			
			<if test="searchKeyword != null ">
      			AND ( PT.memberName LIKE CONCAT('%',#{searchKeyword,jdbcType=VARCHAR},'%' ) OR PT.memberEmail LIKE CONCAT('%',#{searchKeyword,jdbcType=VARCHAR},'%' ) ) 
		     </if>
			) as A
	group by searchDate;
	</select>
  
  <select id="reportPaymentTransactions" parameterType="HashMap"  resultType="HashMap" >
    select 
    sql_calc_found_rows
    PA.paymentTransactionNo, 
  	PA.memberNo, 
  	PA.memberName, 
  	PA.memberPhone, 
  	PA.memberEmail, 
  	PA.nodeType, 
  	PA.nodeNo, 
    PA.nodeEmail, 
    PA.nodeName, 
    PA.nodePhone, 
    PA.affiliateNo, 
    PA.affiliateSerial, 
    AF.affiliateName, 
    PA.paymentApprovalAmount, 
    PA.paymentApprovalNumber, 
    PA.paymentApprovalStatus, 
    PA.pointBackStatus, 
    PA.paymentTransactionType, 
    PA.paymentApprovalDateTime, 
    PA.orgPaymentData, 
    PA.regAdminNo, 
    PA.createTime, 
    PA.updateTime,
	PTR.paymentRouterNo, 
    (SELECT paymentRouterType from payment_router WHERE paymentRouterNo = PTR.paymentRouterNo) as paymentRouterType,
    (SELECT paymentRouterName from payment_router WHERE paymentRouterNo = PTR.paymentRouterNo) as paymentRouterName,
    (SELECT paymentRouterCode  from payment_router WHERE paymentRouterNo = PTR.paymentRouterNo) as paymentRouterCode
   
    from payment_transaction as PA
    inner join affiliate as AF on (PA.affiliateNo= AF.affiliateNo)
    inner join payment_transaction_router as PTR on (PA.paymentTransactionNo = PTR.paymentTransactionNo)
    where 
    	1 = 1
    	 <if test="searchDate != null "> AND PA.paymentApprovalDateTime  LIKE CONCAT(#{searchDate},'%') </if>
    	 <if test="searchPaymentTransactionType != null "> AND PA.paymentTransactionType   = #{searchPaymentTransactionType} </if>
    	 <if test="searchPaymentApprovalStatus != null "> AND PA.paymentApprovalStatus = #{searchPaymentApprovalStatus} </if>
    	 <if test="searchAffiliate != null "> AND PA.affiliateNo = #{searchAffiliate} </if>
    	 <if test = "searchPaymentRouterNo != null">and PTR.paymentRouterNo = #{searchPaymentRouterNo}</if>
    	 <if test = "searchAccLowLimit != null and searchAccMaxLimit != null">
			and (paymentApprovalAmount 	<![CDATA[ >=]]> #{searchAccLowLimit} and paymentApprovalAmount <![CDATA[ <=]]> #{searchAccMaxLimit})
		 </if>
		 <if test = "searchAccLowLimit != null and searchAccMaxLimit == null">
			and (paymentApprovalAmount 	<![CDATA[ >=]]> #{searchAccLowLimit})
		 </if>
		 <if test = "searchAccLowLimit == null and searchAccMaxLimit != null">
			and (paymentApprovalAmount 	<![CDATA[ <=]]> #{searchAccMaxLimit})
		 </if>
    	 <if test="searchKeyword != null ">
      		AND ( memberName LIKE CONCAT('%',#{searchKeyword,jdbcType=VARCHAR},'%' ) OR memberEmail LIKE CONCAT('%',#{searchKeyword,jdbcType=VARCHAR},'%' ) ) 
	     </if>
     <choose>
   	<when test="order !=null">
		order by ${order} 
	</when>
	<otherwise>
		order by createTime desc
	</otherwise>
	</choose>
	<if test="pagination">
		limit ${pageSize} offset ${offset}
	</if>
  </select>
  
  
  <!-- ===============================================================================================================    -->
	
    <select id="reportGpointPayments" parameterType="HashMap" resultType="HashMap">
		SELECT
			<if test = "searchType != null and searchType  =='year'" >  date_format(paymentApprovalDateTime, '%Y') as searchDate , </if>
			<if test = "searchType != null and searchType  =='month'" >  date_format(paymentApprovalDateTime, '%Y-%m') as searchDate, </if>
			<if test = "searchType != null and searchType  =='daily'" >  date_format(paymentApprovalDateTime, '%Y-%m-%d') as searchDate, </if>
			
			sum(paymentApprovalAmount) as paySum,
			sum(realPaymentAmount) as realPaySum,
			sum(gpointPaymentAmount) as gpointPaySum,
			count(realPaymentAmount) as payCase
		from gpoint_payment group by searchDate;
	</select>


  <!-- 기간별 검색에  따른  G point 결제 내역 맆  -->
	<select id="selectPeriodGpointPaymentReports" parameterType="HashMap" resultType="HashMap">
	select 
		date_format(A.paymentApprovalDateTime, '%Y-%m-%d') as searchDate,
   	 	sum(A.paymentApprovalAmount) as paySum,
		sum(A.realPaymentAmount) as realPaySum,
		sum(A.gpointPaymentAmount) as gpointPaySum,
	    count(A.realPaymentAmount) as payCase
	from 
		(
		 select * from gpoint_payment where 1= 1
			<if test = "searchDateStart != null and searchDateEnd != null  "> and (paymentApprovalDateTime between #{searchDateStart} and #{searchDateEnd})</if>
			<if test = "searchAffiliate != null">and affiliateNo = #{searchAffiliate}</if>
			<if test = "searchPaymentTransactionType != null">and paymentTransactionType = #{searchPaymentTransactionType}</if>
			<if test = "searchPaymentApprovalStatus != null">and paymentApprovalStatus = #{searchPaymentApprovalStatus}</if>
			<if test = "searchPaymentMethod != null">and paymentMethod = #{searchPaymentMethod}</if>
			) as A
	group by searchDate;
	</select>
		
	
	<select id="selectGpointPayments" parameterType="HashMap" resultType="HashMap">
		SELECT 
		gpointPaymentNo,
		memberNo,
		memberName,
		memberEmail,
		memberPhone,
		affiliateNo,
		affiliateSerial,
		affiliateName
		paymentApprovalAmount,
		paymentApprovalNumber,
		paymentApprovalStatus,
		paymentMethod,
		paymentTransactionType,
		paymentApprovalDateTime,
		realPaymentAmount,
		gpointPaymentAmount
		createTime,
		updateTime
		FROM gpoint_payment 
		where 
    	  1 = 1
    	 <if test="searchDate != null "> AND paymentApprovalDateTime  LIKE CONCAT(#{searchDate},'%') </if>
    	 <if test="searchPaymentTransactionType != null "> AND paymentTransactionType   = #{searchPaymentTransactionType} </if>
    	 <if test="searchPaymentApprovalStatus != null "> AND paymentApprovalStatus = #{searchPaymentApprovalStatus} </if>
    	 <if test="searchAffiliate != null "> AND affiliateNo = #{searchAffiliate} </if>
    	 <if test = "searchPaymentMethod != null">and paymentMethod = #{searchPaymentMethod}</if>
    	 
     	<choose>
   			<when test="order !=null">
				order by ${order} 
			</when>
		<otherwise>
			order by createTime desc
		</otherwise>
		</choose>
		<if test="pagination">
			limit ${pageSize} offset ${offset}
		</if>
		<!-- 
			where 1 = 1
			<if test="gpointPaymentNo != null"> AND GP.gpointPaymentNo = #{gpointPaymentNo,jdbcType=INTEGER}</if>
			<if test="affiliateNo != null"> AND GP.affiliateNo = #{affiliateNo,jdbcType=INTEGER}</if>
	        <if test="affiliateSerial != null"> AND affiliateSerial = #{affiliateSerial,jdbcType=VARCHAR}</if>
	         
	         <if test="memberName != null or memberEmail != null  or memberPhone != null || affiliateName != null"> AND ( 1 = 2 </if>
		     <if test="memberName != null">  OR M.memberName  LIKE CONCAT('%',#{memberName},'%') </if>
		     <if test="memberEmail != null"> OR M.memberEmail  LIKE CONCAT('%',#{memberEmail},'%') </if>
		     <if test="memberPhone != null"> OR M.memberPhone  LIKE CONCAT('%',#{memberPhone},'%') </if>
		     <if test="affiliateName != null"> OR A.affiliateName  LIKE CONCAT('%',#{affiliateName},'%') </if>
		     <if test="memberName != null or memberEmail != null  or memberPhone != null  || affiliateName != null"> ) </if> 
		 -->
	</select>
	
	<update id="updateGpointPayment" parameterType="HashMap">
    update gpoint_payment 
    set 
    	paymentApprovalStatus = #{paymentApprovalStatus,jdbcType=VARCHAR},
    	updateTime = NOW()
    where gpointPaymentNo = #{gpointPaymentNo,jdbcType=INTEGER}
   </update>
   
   	<insert id="insertGpointPayment" parameterType="HashMap">
	  insert into gpoint_payment (
	  	  gpointPaymentNo, 
	  	  memberNo, 
	  	  memberEmail,
	  	  memberName, 
	  	  memberPhone,
	  	  affiliateNo, 
	      affiliateSerial, 
	  	  affiliateName,
	      paymentApprovalNumber,
	      paymentApprovalStatus,
	      paymentMethod, 
	      paymentTransactionType, 
	      paymentApprovalDateTime, 
	      paymentApprovalAmount, 
	      realPaymentAmount, 
	      gpointPaymentAmount, 
	      createTime, 
	      updateTime
	      )
	     values (
	       #{gpointPaymentNo}, 
	    	#{memberNo}, 
	    	#{memberEmail}, 
	    	#{memberName}, 
	    	#{memberPhone}, 
	    	#{affiliateNo}, 
	    	#{affiliateSerial},
	    	#{affiliateName},
	    	#{paymentApprovalNumber},
	    	#{paymentApprovalStatus},
	    	#{paymentMethod},
	    	#{paymentTransactionType},
	    	#{paymentApprovalDateTime}, 
	    	#{paymentApprovalAmount}, 
	    	#{realPaymentAmount}, 
	    	#{gpointPaymentAmount}, 
	    	NOW(),
	    	NOW()
	    )
	    
	   <selectKey keyProperty="gpointPaymentNo" resultType="java.lang.Integer" order ="AFTER">
			SELECT LAST_INSERT_ID()
		</selectKey>	
   </insert>
  
    <!-- ===============================================================================================================    -->
    
   <select id="reportPointWithdrawals" parameterType="HashMap" resultType="HashMap">
	SELECT
		 sql_calc_found_rows
		PW.pointWithdrawalNo,
		PW.memberNo,
		PW.memberBankAccountNo,
		PW.withdrawalAmount,
		PW.withdrawalStatus,
		PW.withdrawalPointType,
		PW.regAdminNo,
		PW.regType,
		M.memberName,
		M.memberEmail,
		M.memberPhone,
		MBA.bankName,
		MBA.accountOwner,
		MBA.bankAccount,
		PW.createTime,
		PW.updateTime
	from point_withdrawal as PW
	inner join member as M on (PW.memberNo = M.memberNo)
	left outer join member_bank_account as MBA on (PW.memberBankAccountNo = MBA.memberBankAccountNo)
	where
		1 = 1
		<if test="searchDate != null "> AND PW.createTime LIKE CONCAT(#{searchDate},'%') </if>
		<if test="searchWithdrawalStatus != null">and withdrawalStatus = #{searchWithdrawalStatus}</if>
		<if
			test="searchWithdrawalLowLimit != null and searchWithdrawalMaxLimit != null">
			and (withdrawalAmount 	<![CDATA[ >=]]>
			#{searchWithdrawalLowLimit} and withdrawalAmount <![CDATA[ <=]]>
			#{searchWithdrawalMaxLimit})
		</if>
		<if
			test="searchWithdrawalLowLimit != null and searchWithdrawalMaxLimit == null">
			and (withdrawalAmount 	<![CDATA[ >=]]>
			#{searchWithdrawalLowLimit})
		</if>
		<if
			test="searchWithdrawalLowLimit == null and searchWithdrawalMaxLimit != null">
			and (withdrawalAmount 	<![CDATA[ <=]]>
			#{searchWithdrawalMaxLimit})
		</if>
	
		<if test="searchKeyword != null ">
			AND ( memberName LIKE CONCAT('%',#{searchKeyword,jdbcType=VARCHAR},'%' )
			OR memberEmail LIKE CONCAT('%',#{searchKeyword,jdbcType=VARCHAR},'%' )
			)
			</if>
	     <choose>
	   	<when test="order !=null">
			order by ${order} 
		</when>
		<otherwise>
			order by createTime desc
		</otherwise>
		</choose>
		<if test="pagination">
			limit ${pageSize} offset ${offset}
		</if>
	</select>
     
     <select id="selectTotalPointWithdrawalReports" parameterType="HashMap" resultType="HashMap">
		SELECT
			<if test = "searchType != null and searchType  =='year'" >  date_format(A.createTime, '%Y') as searchDate , </if>
			<if test = "searchType != null and searchType  =='month'" >  date_format(A.createTime, '%Y-%m') as searchDate, </if>
			<if test = "searchType != null and searchType  =='daily'" >  date_format(A.createTime, '%Y-%m-%d') as searchDate, </if>
			
			count(A.withdrawalAmount) as withdrawalCase,
	   	 	sum(if(A.withdrawalStatus = '1', A.withdrawalAmount , 0)) as ingWithdrawalAmountSum,
	   	 	sum(if(A.withdrawalStatus = '2', A.withdrawalAmount , 0)) as completeWithdrawalAmountSum,
	   	 	sum(if(A.withdrawalStatus = '3', A.withdrawalAmount , 0)) as holdWithdrawalAmountSum,
	   	 	sum(if(A.withdrawalStatus = '4', A.withdrawalAmount , 0)) as userCancelWithdrawalAmountSum,
	   	 	sum(if(A.withdrawalStatus = '5', A.withdrawalAmount , 0)) as adminCancelWithdrawalAmountSum,
	   	 	sum(A.withdrawalAmount) as withdrawalSum
		from point_withdrawal as A group by searchDate;
	</select>
	
  	 <select id="selectPointWithdrawalReports" parameterType="HashMap" resultType="HashMap">
	select 
   	 	<if test = "searchWithdrawalDateType == null  or searchWithdrawalDateType == 1 "> date_format(A.createTime, '%Y-%m-%d') as searchDate,</if>
   	 	<if test = "searchWithdrawalDateType == 2 "> date_format(A.updateTime, '%Y-%m-%d') as searchDate,</if>
   	 	
   	 	count(A.withdrawalAmount) as withdrawalCase,
   	 	sum(if(A.withdrawalStatus = '1', A.withdrawalAmount , 0)) as ingWithdrawalAmountSum,
   	 	sum(if(A.withdrawalStatus = '2', A.withdrawalAmount , 0)) as completeWithdrawalAmountSum,
   	 	sum(if(A.withdrawalStatus = '3', A.withdrawalAmount , 0)) as holdWithdrawalAmountSum,
   	 	sum(if(A.withdrawalStatus = '4', A.withdrawalAmount , 0)) as userCancelWithdrawalAmountSum,
   	 	sum(if(A.withdrawalStatus = '5', A.withdrawalAmount , 0)) as adminCancelWithdrawalAmountSum,
   	 	sum(A.withdrawalAmount) as withdrawalSum
	from 
		(
		 select PW.*, M.memberName, M.memberEmail from point_withdrawal  as PW
		 inner join member as M on (M.memberNo = PW.memberNo)
		 where 1= 1
			<if test = "searchDateStart != null and searchDateEnd != null  "> and (createTime between #{searchDateStart} and #{searchDateEnd})</if>
			<if test = "searchWithdrawalStatus != null">and withdrawalStatus = #{searchWithdrawalStatus}</if>
			
			<if test = "searchWithdrawalLowLimit != null and searchWithdrawalMaxLimit != null">
				and (withdrawalAmount 	<![CDATA[ >=]]> #{searchWithdrawalLowLimit} and withdrawalAmount <![CDATA[ <=]]> #{searchWithdrawalMaxLimit})
			</if>
			<if test = "searchWithdrawalLowLimit != null and searchWithdrawalMaxLimit == null">
				and (withdrawalAmount 	<![CDATA[ >=]]> #{searchWithdrawalLowLimit})
			</if>
			<if test = "searchWithdrawalLowLimit == null and searchWithdrawalMaxLimit != null">
				and (withdrawalAmount 	<![CDATA[ <=]]> #{searchWithdrawalMaxLimit})
			</if>
			
			<if test="searchKeyword != null ">
      			AND ( memberName LIKE CONCAT('%',#{searchKeyword,jdbcType=VARCHAR},'%' ) OR memberEmail LIKE CONCAT('%',#{searchKeyword,jdbcType=VARCHAR},'%' ) ) 
		     </if>
			) as A
	group by searchDate;
	</select>
	
	  <!-- ===============================================================================================================    -->
	  <!-- R 포인트 자동 적립 현황 리포트    -->
	   <select id="selectPointConversionReports" parameterType="HashMap" resultType="HashMap">
		SELECT
			<if test = "searchType != null and searchType  =='year'" >  date_format(createTime, '%Y') as searchDate , </if>
			<if test = "searchType != null and searchType  =='month'" >  date_format(createTime, '%Y-%m') as searchDate, </if>
			<if test = "searchType != null and searchType  =='daily'" >  date_format(createTime, '%Y-%m-%d') as searchDate, </if>
			
			count(conversionTotalPoint) as totalCount,
   	 		sum(conversionTotalPoint) as totalConversionTotalPoint,
			sum(conversionAccPoint) as totalConversionAccPoint
		from point_conversion_transaction group by searchDate;
	   
	   </select>
	    
	    <select id="selectPeriodPointConversionReports" parameterType="HashMap" resultType="HashMap">
	    select 
			date_format(A.createTime, '%Y-%m-%d') as searchDate,
   	 		count(A.conversionTotalPoint) as totalCount,
   	 		sum(A.conversionTotalPoint) as totalConversionTotalPoint,
			sum(A.conversionAccPoint) as totalConversionAccPoint
		from 
		(
			 select PCT.*
			 	from point_conversion_transaction as PCT
			 	inner join member as M on ( PCT.memberNo = M.memberNo)
			 where 1= 1
				<if test = "searchDateStart != null and searchDateEnd != null  "> and (PCT.createTime between #{searchDateStart} and #{searchDateEnd})</if>
				<if test = "searchNodeType != null">and PCT.nodeType = #{searchNodeType}</if>
				<if test = "searchConversionStatus != null">and conversionStatus = #{searchConversionStatus}</if>
				<if test="searchKeyword != null ">
	      			AND ( memberName LIKE CONCAT('%',#{searchKeyword,jdbcType=VARCHAR},'%' ) OR memberEmail LIKE CONCAT('%',#{searchKeyword,jdbcType=VARCHAR},'%' ) ) 
			     </if>
			) as A
		group by searchDate;
	    </select>
	    
	     <select id="loadPointConversions" parameterType="HashMap" resultType="HashMap">
	   		select 
		     sql_calc_found_rows
		    M.memberName AS memberName,  
		    M.memberEmail AS memberEmail, 
		    M.memberPassword AS memberPassword, 
		    M.memberPassword2 AS memberPassword2, 
		    M.memberType AS memberType, 
		    M.memberStatus AS memberStatus, 
		    M.memberAuthType AS memberAuthType, 
		    M.memberPhone AS memberPhone, 
		    M.recommenderNo AS recommenderNo, 
		    M.joinRoute AS joinRoute, 
		    M.statusReason AS statusReason, 
		    M.isRecommender AS isRecommender, 
		    M.isSaleManager AS isSaleManager,
		    M.isBranch AS isBranch,
		    M.isAffiliate AS isAffiliate, 
		    M.isAgency AS isAgency, 
		    M.regType AS regType, 
		    M.regAdminNo AS regAdminNo, 
		    M.greenPointAccStatus AS greenPointAccStatus, 
		    M.redPointAccStatus AS redPointAccStatus, 
		    M.greenPointUseStatus AS greenPointUseStatus, 
		    M.redPointUseStatus AS redPointUseStatus, 
		    PCT.pointConversionTansactionNo as pointConversionTansactionNo, 
		    PCT.memberNo as memberNo,
		    PCT.conversionTotalPoint as conversionTotalPoint, 
		    PCT.nodeType as nodeType, 
		    PCT.conversionTotalPoint as conversionTotalPoint, 
		    PCT.conversionAccPoint as conversionAccPoint, 
		    PCT.conversionAccRate as conversionAccRate, 
		    PCT.conversionStatus as conversionStatus, 
		    PCT.createTime as createTime, 
		    PCT.updateTime as updateTime
		   
		    from point_conversion_transaction as PCT
		 	inner join member as M on (
		    	PCT.memberNo = M.memberNo 
		    )
		    where 
		    	1 = 1
				<if test="searchDate != null "> AND PCT.createTime LIKE CONCAT(#{searchDate},'%') </if>
				<if test = "searchNodeType != null">and PCT.nodeType = #{searchNodeType}</if>
				<if test = "searchConversionStatus != null">and conversionStatus = #{searchConversionStatus}</if>
				<if test="searchKeyword != null ">
	      			AND ( memberName LIKE CONCAT('%',#{searchKeyword,jdbcType=VARCHAR},'%' ) OR memberEmail LIKE CONCAT('%',#{searchKeyword,jdbcType=VARCHAR},'%' ) ) 
			     </if>
		     <choose>
		   	<when test="order !=null">
				order by ${order} 
			</when>
			<otherwise>
				order by createTime desc
			</otherwise>
			</choose>
			<if test="pagination">
				limit ${pageSize} offset ${offset}
			</if>
	    </select>
	    
	  <!-- ===============================================================================================================    -->
	  <!-- 포인트 쿠폰    -->
	   <select id="selectPointCouponReports" parameterType="HashMap" resultType="HashMap">
	   	SELECT
			<if test = "searchType != null and searchType  =='year'" >  date_format(createTime, '%Y') as searchDate , </if>
			<if test = "searchType != null and searchType  =='month'" >  date_format(createTime, '%Y-%m') as searchDate, </if>
			<if test = "searchType != null and searchType  =='daily'" >  date_format(createTime, '%Y-%m-%d') as searchDate, </if>
			
			count(couponNumber) as totalCount,
			sum(payAmount) as totalPayAmount,
			sum(accPointAmount) as totalAccPointAmount
		from point_coupon  group by searchDate;
	   
	   </select>
	   <select id="selectPeriodPointCouponReports" parameterType="HashMap" resultType="HashMap">
	   	select 
		date_format(createTime, '%Y-%m-%d') as searchDate,
   	 		count(couponNumber) as totalCount,
   	 		sum(payAmount) as totalPayAmount,
			sum(accPointAmount) as totalAccPointAmount
		from 
			(
			 select * from point_coupon where 1= 1
				<if test = "searchDateStart != null and searchDateEnd != null  "> and (createTime between #{searchDateStart} and #{searchDateEnd})</if>
				<if test = "searchCouponType != null">and couponType = #{searchCouponType}</if>
				<if test = "searchUseStatus != null">and useStatus = #{searchUseStatus}</if>
				<if test = "searchDeliveryStatus != null">and deliveryStatus = #{searchDeliveryStatus}</if>
			) as A
		group by searchDate;
	   
	   </select>
	   <select id="loadPointCoupons" parameterType="HashMap" resultType="HashMap">
	    select 
   		sql_calc_found_rows
   		pointCouponNo, 
   		couponNumber, 
   		couponType, 
   		useStatus, 
   		deliveryStatus,
   		payAmount , 
   		accPointRate,
    	accPointAmount,
    	accTargetRange,
    	publisher, 
    	useStartTime,
        useEndTime, 
    	updateTime,
    	createTime
   
	    from point_coupon
	    where 
	    	1 = 1
	    	 <if test="searchDate != null "> AND createTime  LIKE CONCAT(#{searchDate},'%') </if>
	    	 <if test="searchCouponType != null "> AND couponType   = #{searchCouponType} </if>
	    	 <if test="searchUseStatus != null "> AND useStatus = #{searchUseStatus} </if>
	    	 <if test="searchDeliveryStatus != null "> AND deliveryStatus = #{searchDeliveryStatus} </if>
	     <choose>
	   	<when test="order !=null">
			order by ${order} 
		</when>
		<otherwise>
			order by createTime desc
		</otherwise>
		</choose>
		<if test="pagination">
			limit ${pageSize} offset ${offset}
		</if>
	   
	   </select>
	   
	   <!-- ===============================================================================================================    -->
	  <!-- 포인트 쿠폰    트랜잭션 -->
	   <select id="selectPointCouponTransactionReports" parameterType="HashMap" resultType="HashMap">
	   	SELECT
			<if test = "searchType != null and searchType  =='year'" >  date_format(PCT.createTime, '%Y') as searchDate , </if>
			<if test = "searchType != null and searchType  =='month'" >  date_format(PCT.createTime, '%Y-%m') as searchDate, </if>
			<if test = "searchType != null and searchType  =='daily'" >  date_format(PCT.createTime, '%Y-%m-%d') as searchDate, </if>
			
			count(PC.couponNumber) as totalCount,
			sum(PC.payAmount) as totalPayAmount,
			sum(PC.accPointAmount) as totalAccPointAmount
		from point_coupon_transaction as PCT 
		inner join point_coupon as PC on (PCT.pointCouponNo= PC.pointCouponNo)
		 group by searchDate;
	   
	   </select>
	   
	   <select id="selectPeriodPointCouponTransactionReportsReports" parameterType="HashMap" resultType="HashMap">
	   	select 
		date_format(createTime, '%Y-%m-%d') as searchDate,
   	 		count(couponNumber) as totalCount,
   	 		sum(payAmount) as totalPayAmount,
			sum(accPointAmount) as totalAccPointAmount
		from 
			(
			 select 
			 	PCT.*, 
			 	PC.couponNumber,  
			 	PC.payAmount,  
			 	PC.accPointAmount,  
			 	M.memberEmail, 
			 	M.memberName, 
			 	M.memberPhone
			 from point_coupon_transaction as PCT 
			 inner join member as M on (PCT.memberNo= M.memberNo)
			 inner join point_coupon as PC on (PCT.pointCouponNo= PC.pointCouponNo)
			  where 1= 1
				<if test = "searchDateStart != null and searchDateEnd != null  "> and (createTime between #{searchDateStart} and #{searchDateEnd})</if>
				<if test = "searchPointbackStatus != null">and pointBackStatus = #{searchPointbackStatus}</if>
				<if test="searchKeyword != null ">
      				AND ( memberName LIKE CONCAT('%',#{searchKeyword,jdbcType=VARCHAR},'%' ) OR memberEmail LIKE CONCAT('%',#{searchKeyword,jdbcType=VARCHAR},'%' ) ) 
		   	  </if>
			) as A
		group by searchDate;
	   
	   </select>
	   
	   <select id="loadPointCouponTransactions" parameterType="HashMap" resultType="HashMap">
	    select 
   		sql_calc_found_rows
   		PCT.pointCouponTransactionNo,
   		PCT.memberNo,
   		PCT.pointBackStatus,
   		PCT.createTime,
   		PCT.updateTime,
   		
   		PC.pointCouponNo, 
   		PC.couponNumber, 
   		PC.couponType, 
   		PC.useStatus, 
   		PC.deliveryStatus,
   		PC.payAmount , 
   		PC.accPointRate,
    	PC.accPointAmount,
    	PC.accTargetRange,
    	PC.publisher, 
    	PC.useStartTime,
        PC.useEndTime, 
        
    	PC.updateTime,
    	M.memberName,
   		M.memberEmail,
   		M.memberPhone
   
	   	from point_coupon_transaction as PCT 
		inner join member as M on (PCT.memberNo= M.memberNo)
		inner join point_coupon as PC on (PCT.pointCouponNo= PC.pointCouponNo)
	    where 
	    	1 = 1
	    	<if test="searchDate != null "> AND PCT.createTime LIKE CONCAT(#{searchDate},'%') </if>
			<if test = "searchPointbackStatus != null">and pointBackStatus = #{searchPointbackStatus}</if>
			<if test="searchKeyword != null ">
      				AND ( memberName LIKE CONCAT('%',#{searchKeyword,jdbcType=VARCHAR},'%' ) OR memberEmail LIKE CONCAT('%',#{searchKeyword,jdbcType=VARCHAR},'%' ) ) 
		   	  </if>
	     <choose>
	   	<when test="order !=null">
			order by ${order} 
		</when>
		<otherwise>
			order by createTime desc
		</otherwise>
		</choose>
		<if test="pagination">
			limit ${pageSize} offset ${offset}
		</if>
	   
	   </select>
	   
	  <!-- ===============================================================================================================    -->   
	  	<!-- point_code_issue_request    -->
	   <select id="selectPointCodeIssueRequestReports" parameterType="HashMap" resultType="HashMap">
	   	SELECT
			<if test = "searchType != null and searchType  =='year'" >  date_format(createTime, '%Y') as searchDate , </if>
			<if test = "searchType != null and searchType  =='month'" >  date_format(createTime, '%Y-%m') as searchDate, </if>
			<if test = "searchType != null and searchType  =='daily'" >  date_format(createTime, '%Y-%m-%d') as searchDate, </if>
			
			count(issueType) as totalCount,
			sum(payAmount) as totalPayAmount,
			sum(accPointAmount) as totalAccPointAmount,
			sum(finalDepositAmount) as totalDepositAmount,
			sum(if(status = '3' or status = '4'  , finalDepositAmount , 0)) as totalCompleteDeposit,
			sum(if(status = '1' or status = '2' or status = '5' or status = '6' , finalDepositAmount , 0)) as totalNotCompleteDeposit
		from point_code_issue_request  group by searchDate;
	   </select>
	   
	  <select id="selectPeriodPointCodeIssueRequestReports" parameterType="HashMap" resultType="HashMap">
	    select 
			date_format(A.createTime, '%Y-%m-%d') as searchDate,
   	 		count(A.payAmount) as totalCount,
   	 		sum(A.payAmount) as totalPayAmount,
			sum(A.accPointAmount) as totalAccPointAmount,
			sum(A.finalDepositAmount) as totalDepositAmount,
			sum(if(status = '3' or status = '4'  , finalDepositAmount , 0)) as totalCompleteDeposit,
			sum(if(status = '1' or status = '2' or status = '5' or status = '6' , finalDepositAmount , 0)) as totalNotCompleteDeposit
		from 
		(
			 select A.*, M.memberName, M.memberEmail, AF.affiliateName
			 	from point_code_issue_request as A
			 	inner join member as M on ( A.memberNo = M.memberNo)
			 	left outer join affiliate as AF on (A.affiliateNo = AF.affiliateNo)
			 where 1= 1
				<if test = "searchDateStart != null and searchDateEnd != null  "> and (PCT.createTime between #{searchDateStart} and #{searchDateEnd})</if>
				<if test = "searchDepositStatus != null">and depositStatus = #{searchDepositStatus}</if>
				<if test = "searchStatus != null">and status = #{searchStatus} </if>
				<if test = "searchIssueType != null">and issueType = #{searchIssueType} </if>
				<if test="searchKeyword != null ">
	      			AND 
	      			(
	      				memberName LIKE CONCAT('%',#{searchKeyword,jdbcType=VARCHAR},'%' ) OR 
      					memberEmail LIKE CONCAT('%',#{searchKeyword,jdbcType=VARCHAR},'%' ) OR 
      					affiliateName LIKE CONCAT('%',#{searchKeyword,jdbcType=VARCHAR},'%' ) OR 
      					depositor LIKE CONCAT('%',#{searchKeyword,jdbcType=VARCHAR},'%' ) 
	      			) 
			     </if>
			) as A
		group by searchDate;
	    </select>
	    
	   <select id="loadPointCodeIssueRequests" parameterType="HashMap" resultType="HashMap">
	    select 
   		sql_calc_found_rows
  		A.pointCodeIssueRequestNo, 
  		A.memberNo, 
  		A.issueType, 
  		A.payAmount, 
  		A.accPointRate, 
  		A.accPointAmount, 
    	A.accTargetRange, 
    	A.depositAmount, 
    	A.finalDepositAmount, 
    	A.uploadFile, 
    	A.status, 
    	A.depositor, 
    	A.publisher, 
    	A.useStartTime, 
    	A.useEndTime, 
    	A.createTime, 
    	
    	B.memberName,
   		B.memberEmail,
   		B.memberPhone,
   		
   		C.affiliateNo,
   		C.affiliateName 
   
	   	from point_code_issue_request as A
		inner join member as B on (A.memberNo= B.memberNo)
		left outer join affiliate C on (A.affiliateNo = C.affiliateNo)
	    where 
	    	1 = 1
	    	<if test="searchDate != null "> AND A.createTime LIKE CONCAT(#{searchDate},'%') </if>
			<if test = "searchStatus != null">and status = #{searchStatus} </if>
			<if test = "searchIssueType != null">and issueType = #{searchIssueType} </if>
			<if test="searchKeyword != null ">
      				AND 
      				(
      					memberName LIKE CONCAT('%',#{searchKeyword,jdbcType=VARCHAR},'%' ) OR 
      					memberEmail LIKE CONCAT('%',#{searchKeyword,jdbcType=VARCHAR},'%' ) OR 
      					affiliateName LIKE CONCAT('%',#{searchKeyword,jdbcType=VARCHAR},'%' ) OR 
      					depositor LIKE CONCAT('%',#{searchKeyword,jdbcType=VARCHAR},'%' ) 
      				) 
		   	  </if>
	     <choose>
	   	<when test="order !=null">
			order by ${order} 
		</when>
		<otherwise>
			order by createTime desc
		</otherwise>
		</choose>
		<if test="pagination">
			limit ${pageSize} offset ${offset}
		</if>
	   
	   </select>

	  <!-- ===============================================================================================================    -->   
	  	<!-- point_code_issue-->
	   <select id="selectPointCodeIssueReports" parameterType="HashMap" resultType="HashMap">
	   	SELECT
			<if test = "searchType != null and searchType  =='year'" >  date_format(A.createTime, '%Y') as searchDate , </if>
			<if test = "searchType != null and searchType  =='month'" >  date_format(A.createTime, '%Y-%m') as searchDate, </if>
			<if test = "searchType != null and searchType  =='daily'" >  date_format(A.createTime, '%Y-%m-%d') as searchDate, </if>
			
			count(issueType) as totalCount,
			sum(A.payAmount) as totalPayAmount,
			sum(A.accPointAmount) as totalAccPointAmount,
			sum(B.depositAmount) as totalDepositAmount
		from point_code_issue as A 
		inner join point_code_issue_request as B on (A.pointCodeIssueRequestNo = B.pointCodeIssueRequestNo)
		group by searchDate;
	   </select>
	   
	   <select id="selectPeriodPointCodeIssueReports" parameterType="HashMap" resultType="HashMap">
	    select 
			date_format(createTime, '%Y-%m-%d') as searchDate,
   	 		count(payAmount) as totalCount,
   	 		sum(payAmount) as totalPayAmount,
			sum(accPointAmount) as totalAccPointAmount,
			sum(depositAmount) as totalDepositAmount
		from 
		(
			 select B.*,A.useStatus, A.pointCodeIssueNo
			 from point_code_issue as A 
			 inner join point_code_issue_request as B on (A.pointCodeIssueRequestNo = B.pointCodeIssueRequestNo)
			 where 1= 1
				<if test = "searchDateStart != null and searchDateEnd != null  "> and (A.createTime between #{searchDateStart} and #{searchDateEnd})</if>
				<if test = "searchUseStatus != null">and useStatus = #{searchUseStatus}</if>
				<if test = "searchIssueType != null">and issueType = #{searchIssueType}</if>
				<if test="searchKeyword != null ">
	      			AND ( memberName LIKE CONCAT('%',#{searchKeyword,jdbcType=VARCHAR},'%' ) OR memberEmail LIKE CONCAT('%',#{searchKeyword,jdbcType=VARCHAR},'%' ) ) 
			     </if>
			) as A
		group by searchDate;
	    </select>
	    
	   <select id="loadPointCodeIssues" parameterType="HashMap" resultType="HashMap">
	    select 
   		sql_calc_found_rows
  		A.pointCode,
  		A.pointCodeIssueNo,
  		A.useStatus,
  		
  		B.pointCodeIssueRequestNo, 
  		B.memberNo, 
  		B.issueType, 
  		B.payAmount, 
  		B.accPointRate, 
  		B.accPointAmount, 
    	B.accTargetRange, 
    	B.depositAmount, 
    	B.uploadFile, 
    	B.status, 
    	B.publisher, 
    	B.useStartTime, 
    	B.useEndTime, 
    	A.createTime,
    	
    	C.memberName,
   		C.memberEmail,
   		C.memberPhone,
   		
   		D.affiliateName
   
	   	from point_code_issue as A
		inner join point_code_issue_request  as B on (A.pointCodeIssueRequestNo= B.pointCodeIssueRequestNo)
		inner join member as C on (A.memberNo= C.memberNo)
		left outer join affiliate  as D on (D.affiliateNo = B.affiliateNo)
	    where 
	    	1 = 1
	    	<if test="searchDate != null "> AND A.createTime LIKE CONCAT(#{searchDate},'%') </if>
			<if test = "searchUseStatus != null">and useStatus = #{searchUseStatus}</if>
			<if test = "searchIssueType != null">and issueType = #{searchIssueType}</if>
			<if test="searchKeyword != null ">
      				AND ( 
      					memberName LIKE CONCAT('%',#{searchKeyword,jdbcType=VARCHAR},'%' ) OR 
      					memberEmail LIKE CONCAT('%',#{searchKeyword,jdbcType=VARCHAR},'%' ) OR
      					pointCode LIKE CONCAT('%',#{searchKeyword,jdbcType=VARCHAR},'%' )
      				) 
		   	  </if>
	     <choose>
	   	<when test="order !=null">
			order by ${order} 
		</when>
		<otherwise>
			order by createTime desc
		</otherwise>
		</choose>
		<if test="pagination">
			limit ${pageSize} offset ${offset}
		</if>
	   </select>
	   
	   <!-- ===============================================================================================================    -->   
	  	<!-- point_code_transaction-->
	   <select id="selectPointCodeTransactionReports" parameterType="HashMap" resultType="HashMap">
	   	SELECT
			<if test = "searchType != null and searchType  =='year'" >  date_format(A.createTime, '%Y') as searchDate , </if>
			<if test = "searchType != null and searchType  =='month'" >  date_format(A.createTime, '%Y-%m') as searchDate, </if>
			<if test = "searchType != null and searchType  =='daily'" >  date_format(A.createTime, '%Y-%m-%d') as searchDate, </if>
			
			count(issueType) as totalCount,
			sum(A.payAmount) as totalPayAmount,
			sum(A.accPointAmount) as totalAccPointAmount,
			sum(C.depositAmount) as totalDepositAmount
		from point_code_transaction as A 
		inner join point_code_issue  as B on (A.pointCodeIssueNo = B.pointCodeIssueNo)
		inner join point_code_issue_request  as C on (B.pointCodeIssueRequestNo = C.pointCodeIssueRequestNo)
		group by searchDate;
	   </select>
	   
	   <select id="selectPeriodPointCodeTransactionReports" parameterType="HashMap" resultType="HashMap">
	    select 
			date_format(createTime, '%Y-%m-%d') as searchDate,
   	 		count(payAmount) as totalCount,
   	 		sum(payAmount) as totalPayAmount,
			sum(accPointAmount) as totalAccPointAmount,
			sum(depositAmount) as totalDepositAmount
		from 
		(
			select 
				D.memberNo,
				B.memberName,
				B.memberEmail,
				B.memberPhone,
			    D.issueType,
				D.payAmount,
				D.accPointRate,
				D.accPointAmount,
				D.accTargetRange,
				D.depositAmount,
				D.depositBankAccount, 
    			D.depositRate, 
				D.uploadFile,
				D.publisher,
				D.useStartTime,
				D.useEndTime,
				A.createTime
			from point_code_transaction as A 
			inner join member  as B on (A.memberNo = B.memberNo)
			inner join point_code_issue  as C on (A.pointCodeIssueNo = C.pointCodeIssueNo)
			inner join point_code_issue_request  as D on (C.pointCodeIssueRequestNo = D.pointCodeIssueRequestNo)
			where 1= 1
				<if test = "searchDateStart != null and searchDateEnd != null  "> and (A.createTime between #{searchDateStart} and #{searchDateEnd})</if>
				<if test = "searchPointbackStatus != null">and pointBackStatus = #{searchPointbackStatus}</if>
				<if test="searchKeyword != null ">
	      			AND ( memberName LIKE CONCAT('%',#{searchKeyword,jdbcType=VARCHAR},'%' ) OR memberEmail LIKE CONCAT('%',#{searchKeyword,jdbcType=VARCHAR},'%' ) ) 
			     </if>
			) as A
		group by searchDate;
	    </select>
	    
	   <select id="loadPointCodeTransactions" parameterType="HashMap" resultType="HashMap">
	    select 
   		sql_calc_found_rows
  		A.createTime,
  		A.updateTime,
  		A.pointBackStatus,
  		A.pointCodeTransactionNo,
  		
  		B.memberName,
   		B.memberEmail,
   		B.memberPhone,
   		
  		C.pointCode,
  		C.useStatus,
  		
  		D.pointCodeIssueRequestNo, 
  		D.memberNo, 
  		D.issueType, 
  		D.payAmount, 
  		D.accPointRate, 
  		D.accPointAmount, 
    	D.accTargetRange, 
    	D.depositAmount, 
    	D.depositBankAccount, 
    	D.depositRate, 
    	D.uploadFile, 
    	D.status, 
    	D.publisher, 
    	D.useStartTime, 
    	D.useEndTime,
    	
    	E.affiliateName
   
	   	from point_code_transaction as A 
		inner join member  as B on (A.memberNo = B.memberNo)
		inner join point_code_issue  as C on (A.pointCodeIssueNo = C.pointCodeIssueNo)
		inner join point_code_issue_request  as D on (C.pointCodeIssueRequestNo = D.pointCodeIssueRequestNo)
		left outer join affiliate as E on (D.affiliateNo = E.affiliateNo)
	    where 
	    	1 = 1
	    	<if test="searchDate != null "> AND A.createTime LIKE CONCAT(#{searchDate},'%') </if>
			<if test = "searchUseStatus!= null">and useStatus = #{searchUseStatus!=}</if>
			<if test="searchKeyword != null ">
      				AND ( 
      					memberName LIKE CONCAT('%',#{searchKeyword,jdbcType=VARCHAR},'%' ) OR 
      					memberEmail LIKE CONCAT('%',#{searchKeyword,jdbcType=VARCHAR},'%' ) OR
      					pointCode LIKE CONCAT('%',#{searchKeyword,jdbcType=VARCHAR},'%' )
      				) 
		   	  </if>
	     <choose>
	   	<when test="order !=null">
			order by ${order} 
		</when>
		<otherwise>
			order by createTime desc
		</otherwise>
		</choose>
		<if test="pagination">
			limit ${pageSize} offset ${offset}
		</if>
	   </select>
	   
	   <select id="selectPointCodePointbackRecords" parameterType="HashMap" resultType="HashMap">
	   	select
			sql_calc_found_rows 
			B.memberNo as registerMemberNo,
			B.memberName as registerMemberName,
			B.memberEmail as registerMemberEmail,
			B.memberPhone as registerMemberPhone,
			
			E.pointCodePointbackRecordNo, 
			E.memberNo, 
			E.pointCodeTransactionNo, 
			E.nodeNo, 
			E.nodeType, 
		    E.accRate, 
		    E.accPoint, 
		    
			D.payAmount,
			D.issueType,
			
			F.memberName,
			F.memberEmail,
			F.memberPhone
			
	 	from point_code_transaction as A 
		inner join member  as B on (A.memberNo = B.memberNo)
		inner join point_code_issue  as C on (A.pointCodeIssueNo = C.pointCodeIssueNo)
		inner join point_code_issue_request  as D on (C.pointCodeIssueRequestNo = D.pointCodeIssueRequestNo)
		inner join point_code_pointback_record as E on (A.pointCodeTransactionNo= E.pointCodeTransactionNo)
		inner join member as F on (E.memberNo= F.memberNo)
		
		where 1 = 1
		   <if test="pointCodeTransactionNo != null"> AND E.pointCodeTransactionNo = #{pointCodeTransactionNo,jdbcType=INTEGER}</if>
		   <if test="pointCodePointbackRecordNo != null"> AND pointCodePointbackRecordNo = #{pointCodePointbackRecordNo,jdbcType=INTEGER}</if>
		   <if test="memberNo != null"> AND memberNo = #{memberNo,jdbcType=INTEGER}</if>
	   </select>
	   
	   	  <!-- ===============================================================================================================    -->   
	  	<!-- shop_service    -->
	   <select id="selectOrderReports" parameterType="HashMap" resultType="HashMap">
	   	SELECT
			<if test = "searchType != null and searchType  =='year'" >  date_format(createTime, '%Y') as searchDate , </if>
			<if test = "searchType != null and searchType  =='month'" >  date_format(createTime, '%Y-%m') as searchDate, </if>
			<if test = "searchType != null and searchType  =='daily'" >  date_format(createTime, '%Y-%m-%d') as searchDate, </if>
			
			count(orderAmount) as totalCount,
			sum(orderAmount) as totalPayAmount,
			sum(gpointAmount) as totalAccPointAmount,
			sum(if(status = '3' or status = '4'  , orderAmount , 0)) as totalCompleteOrderAmount,
			sum(if(status = '1' or status = '6' or status = '5' or status = '6' , orderAmount , 0)) as totalNotCompleteOrderAmount
		from shop_product_order  group by searchDate;
	   </select>
	   
	  <select id="selectPeriodOrderReports" parameterType="HashMap" resultType="HashMap">
	    select 
			date_format(A.createTime, '%Y-%m-%d') as searchDate,
   	 		count(A.orderAmount) as totalCount,
   			sum(A.orderAmount) as totalPayAmount,
			sum(A.gpointAmount) as totalAccPointAmount,
			sum(if(status = '3' or status = '4'  , A.orderAmount , 0)) as totalCompleteOrderAmount,
			sum(if(status = '1' or status = '6' or status = '5' or status = '6' , A.orderAmount , 0)) as totalNotCompleteOrderAmount
		from 
		(
			 select B.*, C.memberName, C.memberEmail,C.memberPhone
			 	from shop_product_order as B
			 	inner join member as C on ( B.orderMemberNo= C.memberNo)
			 where 1= 1
				<if test = "searchDateStart != null and searchDateEnd != null  "> and (B.createTime between #{searchDateStart} and #{searchDateEnd})</if>
				<if test = "searchStatus != null">and B.status = #{searchStatus} </if>
				<if test="searchKeyword != null ">
	      			AND 
	      			(
	      				memberName LIKE CONCAT('%',#{searchKeyword,jdbcType=VARCHAR},'%' ) OR 
      					memberEmail LIKE CONCAT('%',#{searchKeyword,jdbcType=VARCHAR},'%' ) 
	      			) 
			     </if>
			) as A
		group by searchDate;
	    </select>
	    
	   <select id="loadOrders" parameterType="HashMap" resultType="HashMap">
	    select 
   		sql_calc_found_rows
  		A.*, 
  		B.memberName, B.memberEmail, B.memberPhone
   
	   	from shop_product_order  as A
		inner join member as B on (A.orderMemberNo= B.memberNo)
	    where 
	    	1 = 1
	    	<if test="searchDate != null "> AND A.createTime LIKE CONCAT(#{searchDate},'%') </if>
			<if test = "searchStatus != null">and status = #{searchStatus} </if>
			<if test="searchKeyword != null ">
      				AND 
      				(
      					memberName LIKE CONCAT('%',#{searchKeyword,jdbcType=VARCHAR},'%' ) OR 
      					memberEmail LIKE CONCAT('%',#{searchKeyword,jdbcType=VARCHAR},'%' ) OR 
      					affiliateName LIKE CONCAT('%',#{searchKeyword,jdbcType=VARCHAR},'%' ) 
      				) 
		   	  </if>
	     <choose>
	   	<when test="order !=null">
			order by ${order} 
		</when>
		<otherwise>
			order by createTime desc
		</otherwise>
		</choose>
		<if test="pagination">
			limit ${pageSize} offset ${offset}
		</if>
	   
	   </select>

	  <!-- ===============================================================================================================    -->   
	  
</mapper>
